(()=>{"use strict";const e=class{constructor(e,t={}){if("string"==typeof e)("object"!=typeof t||null===t||Array.isArray(t))&&(console.error("second parameter must me a object,configuration failed"),t={}),this.config({apiKey:e,...t});else{if("object"!=typeof e||null===e||Array.isArray(e))throw new Error("missed apikey parameter");this.config(e)}}defaultUrl="";params="";setKey(e){if(!e)throw new Error("missed paramete for setting apikey");this.config({apiKey:e})}async search(e){this.searchConfig({...this.defaultConfig,...e});let t=this.defaultUrl+=this.params;const r=await fetch(t),s={};return s.result=r.ok,s.data=await r.json(),this.params="",s}defaultConfig={};config(e){for(const t of Object.entries(e))this.defaultConfig[t[0]]=t[1]}searchConfig(e){for(const t of Object.entries(e))this.attachUrlParams(t)}attachUrlParams(e){const[t,r]=e;let s=!1;this.getRules().forEach((e=>{e[0]===t&&(this.params+=e[1]+r,s=!0)})),s||console.error(t+"  not exist")}#e=[["apiKey","appid"],["city","q"],["language","lang"],["mode","mode"],["units","units"]];rules=[];getRules(){return[...this.filterRules(this.#e),...this.filterRules(this.rules)]}filterRules(e){const t=JSON.parse(JSON.stringify(e));return t.forEach((e=>{e[1].trim(),e[1]=`&${e[1]}=`})),t}},t=class extends e{defaultUrl="https://api.openweathermap.org/data/2.5/weather?";rules=[["latitude","lat"],["longitude","lon"]]},r=class extends e{defaultUrl="http://api.openweathermap.org/geo/1.0/direct?limit=5";rules=[["limit","limit"]]};window.search=function(e,s){if(!e)throw new Error("missed paramete for setting apikey");return{weatherDispatcher:new t(e,s),searchCities:new r(e,s)}}})();